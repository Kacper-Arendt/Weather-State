{"version":3,"sources":["Models/App.ts","redux/hooks.ts","redux/city/citySlice.ts","Models/MediaQueries.ts","components/UI/Spinner.tsx","components/AddCity.tsx","redux/appSlice.ts","components/UI/CityMenu.tsx","components/City.tsx","components/UI/Popup.tsx","components/Cities.tsx","images/backgroundEarth.jpg","App.tsx","redux/store.ts","index.tsx"],"names":["Status","useAppDispatch","useDispatch","useAppSelector","useSelector","citySlice","createSlice","name","initialState","reducers","addCity","reducer","state","action","push","payload","prepare","searchedCity","id","nanoid","favorites","active","removeCity","index","findIndex","city","splice","AddFetchedData","fetchedData","addToFavorites","setActive","actions","size","device","mobileS","mobileM","tablet","laptop","laptopL","Span","styled","span","Spinner","Form","form","Input","input","Button","button","AddCity","app","useState","setCity","dispatch","type","value","onChange","e","target","disabled","onClick","preventDefault","status","Fetching","Idle","appSlice","changeStatus","setMessage","message","Menu","div","props","BurgerIcon","CityMenu","favorite","removeFromFav","addToFav","removeCityHandler","Wrapper","Header","header","A","a","WeatherData","City","cities","apiData","setApiData","error","setError","setFavorite","apiUrl","process","icon","weather","useEffect","fetch","then","res","json","data","cod","catch","console","log","src","alt","localStorage","removeItem","main","temp","description","wind","speed","pressure","humidity","Div","Popup","handleClose","content","Cities","map","length","GlobalStyle","createGlobalStyle","background","H1","h1","App","store","configureStore","appReducer","cityReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.383b3554.chunk.js","sourcesContent":["export interface IApp {\n    status: Status,\n    message?: string,\n}\n\nexport enum Status {\n    Idle = \"IDLE\",\n    Fetching = \"FETCHING\",\n}\n\n\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../redux/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, nanoid, PayloadAction} from \"@reduxjs/toolkit\";\nimport {ICity, IFetchedApiData} from \"../../Models/City\";\n\nconst initialState = [] as ICity[]\n\nexport const citySlice = createSlice({\n    name: 'city',\n    initialState,\n    reducers: {\n        addCity: {\n            reducer: (state, action: PayloadAction<ICity>) => {\n                state.push(action.payload);\n            },\n            prepare: (searchedCity: string) => ({\n                payload: {\n                    id: nanoid(),\n                    searchedCity,\n                    favorites: false,\n                    active: false,\n                } as ICity\n            }),\n        },\n        removeCity(state, action: PayloadAction<string>) {\n            const index = state.findIndex((city) => city.id === action.payload);\n            state.splice(index, 1);\n        },\n        AddFetchedData(state, action: PayloadAction<IFetchedApiData>) {\n            state.findIndex((city) => city.fetchedData = action.payload)\n        },\n        addToFavorites: ((state) => {\n            state.findIndex((city) => {\n                city.favorites = !city.favorites\n            })\n        }),\n        setActive: ((state, action: PayloadAction<string>) => {\n            const index = state.findIndex((city) => city.id === action.payload);\n            state[index].active = !state[index].active\n        }),\n    },\n});\n\nexport const {addCity, removeCity, AddFetchedData, addToFavorites, setActive} = citySlice.actions;\n\nexport default citySlice.reducer;","const size= {\n    mobileS: '320px',\n    mobileM: '375px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n}\n\nexport const device: typeof size = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n};","import React from 'react';\nimport styled from 'styled-components';\n\nconst Span = styled.span`\n  position: relative;\n  padding: 0  10px 0 10px;\n  \n  :after {\n    content: \"\";\n   position: absolute;\n   width: 50%;\n   height: 50%;\n   top: 0;\n   left: 0;\n   right: 0;\n   bottom: 0;\n   margin: auto;\n   border: 4px solid transparent;\n   border-top-color: #ffffff;\n   border-radius: 50%;\n   animation: button-loading-spinner 1s ease infinite;\n\n  @keyframes button-loading-spinner {\n    from {\n      transform: rotate(0turn);\n    }\n    to {\n      transform: rotate(2turn);\n    }\n`\n\nexport const Spinner = (): JSX.Element => {\n    return (\n        <Span></Span>\n    );\n}","import React, {useState} from \"react\";\nimport styled from 'styled-components';\nimport {FaSearch} from \"react-icons/fa\";\n\nimport {useAppDispatch, useAppSelector} from \"../redux/hooks\";\nimport {addCity} from \"../redux/city/citySlice\";\nimport {device} from '../Models/MediaQueries';\nimport {Spinner} from './UI/Spinner';\nimport {Status} from '..//Models/App';\n\nconst Form = styled.form`\n  width: 15rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  justify-self: center;\n  height: 3.2rem;\n  margin-right: 1.5rem;\n  font-size: 2rem;\n  \n@media${device.tablet} {\n  justify-self: center;\n  margin-right: 0;\n  width: 30rem;\n  font-size: 1.5rem;\n}\n`\n\nconst Input = styled.input`\n  width: 75%;\n  height: 100%;\n  border-radius: 3rem 0 0 3rem;\n  border: 0;\n  outline: 0;\n  background-color: #353b48;\n  color: white;\n  padding: .5rem 0 .5rem 1.5rem;\n  font-size: inherit;\n  font-weight: 600;\n  letter-spacing: .07em;\n  cursor: pointer;\n`\n\nconst Button = styled.button`\n  height: 100%;\n  padding: 0 1.5rem;\n  outline: 0;\n  border-radius: 0 3rem 3rem 0;\n  border: none;\n  background-color: #353b48;\n  color: white;\n  font-size: inherit;\n  font-weight: 600;\n  cursor: pointer;\n\n  :disabled {\n    color: grey;\n  }\n`\n\nexport const AddCity = (): JSX.Element => {\n    const {app} = useAppSelector(state => state);\n    const [city, setCity] = useState<string>('');\n    const dispatch = useAppDispatch()\n\n    const cityHandler = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        dispatch(addCity(city));\n        setCity('');\n    }\n\n    return (\n        <Form>\n            <Input\n                type=\"text\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n            />\n            <Button\n                disabled={!city}\n                onClick={cityHandler}>\n                {app.status === Status.Fetching ? <Spinner/> : <FaSearch></FaSearch>}\n            </Button>\n        </Form>\n    )\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\nimport {IApp, Status} from '../Models/App'\n\nconst initialState = {status: Status.Idle} as IApp;\n\nexport const appSlice = createSlice({\n    name: 'app',\n    initialState,\n    reducers: {\n        changeStatus: (state, action: PayloadAction<Status>) => {\n            state.status = action.payload\n        },\n        setMessage: (state, action) => {\n            state.message = action.payload\n        },\n    },\n});\n\nexport const {changeStatus, setMessage} = appSlice.actions;\n\nexport default appSlice.reducer;","import React, {useState} from 'react';\nimport {AiFillStar, AiOutlineDelete, AiOutlineStar} from 'react-icons/ai';\nimport styled, {keyframes} from 'styled-components';\nimport {setActive} from '../../redux/city/citySlice';\n\ninterface MenuProps {\n    active: boolean\n}\n\nconst Menu = styled.div<MenuProps>`\n  position: absolute;\n  display: flex;\n  left: 50%;\n  top: 50%;\n  width: 100%;\n  height: 100%;\n  transform: translate(-50%, -50%);\n  justify-self: center;\n  align-self: center;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(57, 57, 57, 0.9);\n  text-align: center;\n  list-style: none;\n  opacity: ${(props: MenuProps) => props.active ? 1 : 0};\n  visibility: ${(props: MenuProps) => props.active ? 'visible' : 'hidden'};\n  transition: all 0.6s;\n\n  a {\n    cursor: pointer;\n    display: inline-block;\n    margin: 1rem;\n    font-size: 3.5rem;\n    transition: all 0.3s;\n    transform: ${(props: MenuProps) => props.active ? 'rotate(360deg)' : null};\n\n    :hover {\n      transform: scale(1.1);\n    }\n  }\n`\n\nconst BurgerIcon = styled.span<MenuProps>`\n  position: relative;\n  background-color: ${(props: MenuProps) => props.active ? 'transparent' : '#333'};\n  z-index: 100;\n  top: 0;\n  right: .3rem;\n  &,\n  &::after,\n  &::before {\n    width: 2.5rem;\n    height: 2px;\n    display: inline-block;\n    transition: all .5s;\n  }\n\n  &::before,\n  &::after {\n    background-color: ${(props: MenuProps) => props.active ? 'white' : '#333'};\n    position: absolute;\n    content: '';\n    opacity: 1;\n  }\n\n  &::before {\n    top: .5rem;\n    transform: ${(props: MenuProps) => props.active ? 'rotate(405deg)  translateY(-.7rem)' : \"transform: translateY(0)\"}\n  }\n\n  &::after {\n    top: -.5rem;\n    transform: ${(props: MenuProps) => props.active ? 'rotate(-405deg)  translateY(.7rem)' : \"transform: translateY(0)\"}\n  }\n`\n\nexport interface IProps {\n    id: string,\n    favorite: boolean,\n    active: boolean,\n    removeFromFav?: () => void,\n    addToFav?: () => void,\n    removeCityHandler?: (id: string) => void,\n}\n\nexport const CityMenu = (props: IProps) => {\n    return (\n        <>\n            <BurgerIcon active={props.active}></BurgerIcon>\n            <Menu active={props.active}>\n                <a>{props.favorite ?\n                    <AiFillStar onClick={props.removeFromFav}/>\n                    :\n                    <AiOutlineStar onClick={props.addToFav}/>}\n                </a>\n                <a onClick={() => props.removeCityHandler!(props.id)}><AiOutlineDelete></AiOutlineDelete></a>\n            </Menu>\n        </>\n    )\n}\n","import React, {useEffect, useState} from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../redux/hooks\";\nimport styled from \"styled-components\";\nimport {AiOutlineDelete, AiFillStar, AiOutlineStar} from \"react-icons/ai\";\n\nimport {removeCity, AddFetchedData, addToFavorites, setActive} from '../redux/city/citySlice';\nimport {changeStatus, setMessage} from '../redux/appSlice';\nimport {ICity, IFetchedApiData, IProps} from '../Models/City';\nimport {device} from '../Models/MediaQueries';\nimport {Status} from \"../Models/App\";\nimport {CityMenu} from \"./UI/CityMenu\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  width: 23rem;\n  height: 22rem;\n  margin: 2rem;\n  border: solid black .2rem;\n  background-color: rgba(53, 59, 72, .9);\n  color: white;\n  font-size: 1.5rem;\n  transition: all 0.5s;\n  position: relative;\n\n  :hover {\n    box-shadow: 2px 2px 1.5rem #000;\n  }\n`\n\nconst Header = styled.header`\n  display: grid;\n  grid-template-rows: 1;\n  grid-template-columns: 1fr 3fr 1fr;\n  justify-content: space-between;\n  align-content: center;\n  align-items: center;\n  width: 100%;\n  max-height: 5rem;\n  background-color: rgba(157, 118, 61, 0.8);\n\n  h2 {\n    margin: 0 .5rem;\n    padding-left: 1rem;\n  }\n\n  img {\n    width: 5rem;\n  }\n`\n\nconst A = styled.a`\n  position: absolute;\n  top: .8rem;\n  right: .5rem;\n  width: 4.2rem;\n  height: 3.5rem;\n  z-index: 200;\n  background-color: transparent;\n`\n\nconst WeatherData = styled.div`\n  width: 100%;\n  padding: 1rem 0 1rem 1.5rem;\n\n  p {\n    letter-spacing: .25rem;\n    margin-bottom: .6rem;\n  }\n`\n\nexport const City = (props: IProps) => {\n    const dispatch = useAppDispatch();\n    const {cities, app} = useAppSelector(state => state)\n    const [apiData, setApiData] = useState<IFetchedApiData>();\n    const [error, setError] = useState();\n    const [favorite, setFavorite] = useState(false);\n\n    const apiKey = process.env[\"REACT_APP_API_KEY\"];\n    const apiUrl =\n        `https://api.openweathermap.org/data/2.5/weather?q=${props.name}&units=metric&&exclude=hourly&appid=${apiKey}`;\n    const icon = `http://openweathermap.org/img/wn/${apiData?.weather[0].icon}.png`\n\n    const removeCityHandler = (id: string): void => {\n        dispatch(removeCity(id))\n    }\n    const addToFav = () => {\n        setFavorite(true);\n    }\n\n    const showId = (id: string) => {\n        dispatch(setActive(id))\n    }\n\n    const removeFromFav = () => {\n        setFavorite(false);\n        if (apiData) {\n            localStorage.removeItem(`favorite ${apiData.name}`)\n        }\n    }\n\n    useEffect(() => {\n        dispatch(changeStatus(Status.Fetching))\n        fetch(apiUrl)\n            .then((res) => res.json())\n            .then((data) => {\n                if (data.cod == 404) {\n                    setError(data.message);\n                    dispatch(changeStatus(Status.Idle))\n                    dispatch(setMessage(data.message))\n                    return;\n                } else\n                    setApiData(data)\n                dispatch(AddFetchedData(data) && changeStatus(Status.Idle))\n            })\n            .catch((error) => {\n                console.log(error)\n            });\n    }, [apiUrl])\n\n    const fetchedData = () => {\n        if (!error && apiData) {\n            return (\n                <>\n                    <Wrapper>\n                        <Header>\n                            <h2>{apiData.name} </h2>\n                            <img src={icon} alt=\"weather icon\"/>\n                            <A onClick={() => showId(props.id)}/>\n                            <CityMenu\n                                id={props.id}\n                                favorite={favorite}\n                                active={props.active}\n                                addToFav={() => addToFav()}\n                                removeFromFav={() => removeFromFav()}\n                                removeCityHandler={(id) => removeCityHandler(id)}\n                            />\n                        </Header>\n                        <WeatherData>\n                            <p>Temp: {`${apiData.main.temp} °C`}</p>\n                            <p>Conditions: {apiData.weather[0].description} </p>\n                            <p>Wind: {apiData.wind.speed} m/s</p>\n                            <p>Pressure: {`${apiData.main.pressure}  HPa`}</p>\n                            <p>Humidity: {`${apiData.main.humidity}%`}</p>\n                        </WeatherData>\n                    </Wrapper>\n                </>\n            )\n        }\n    }\n\n    return (\n        <>\n            {fetchedData()}\n        </>\n    )\n}\n\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Div = styled.div`\n  position: fixed;\n  background: #00000050;\n  width: 100%;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 200;\n\n  div {\n    width: 55%;\n    max-width: 450px;\n    max-height: 70vh;\n    margin: 0 auto;\n    margin-top: 20vh;\n    padding: 20px;\n    border: 2px solid black;\n    border-radius: 4px;\n    text-align: center;\n    background: #fff;\n    overflow: auto;\n    text-transform: capitalize;\n    cursor: pointer;\n    text-wrap: none;\n  }\n`\n\ninterface IProps {\n    content?: string,\n    handleClose?: () => void\n}\n\nexport const Popup = (props: IProps): JSX.Element => {\n    return (\n        <Div onClick={props.handleClose}>\n            <div>\n                <h3>{props.content}</h3>\n            </div>\n        </Div>\n    )\n}","import React, {useState} from \"react\";\nimport styled from \"styled-components\";\nimport {useAppDispatch, useAppSelector} from \"../redux/hooks\";\nimport {useEffect} from \"react\";\n\nimport {City} from \"./City\";\nimport {device} from '../Models/MediaQueries'\nimport {Status} from '../Models/App';\nimport {ICity} from '../Models/City';\nimport {Popup} from './UI/Popup';\nimport {setMessage} from '../redux/appSlice';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 30rem;\n  margin: auto;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 1rem;\n  letter-spacing: 1.4px;\n\n@media${device.tablet} {\n  flex-direction: row;\n  width: 60rem;\n}\n\n  h1 {\n    width: 80%;\n    margin-top: 2rem;\n    text-align: center;\n    justify-self: center;\n    font-size: 1.5rem;\n    color: white;\n    text-transform: capitalize;\n    text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;\n\n    animation-name: moveInLeft;\n    animation-duration: 1s;\n\n    @keyframes moveInLeft {\n      0% {\n        opacity: 0;\n        transform: translateX(-20rem);\n      }\n      80% {\n        transform: translateX(.5rem);\n      }\n      100% {\n        opacity: 1;\n        transform: translateX(0);\n      }\n    }\n\n  @media${device.tablet} {\n    font-size: 2.5rem;\n  }\n  }\n`\n\nexport const Cities = () => {\n    const {cities, app} = useAppSelector(state => state)\n    const dispatch = useAppDispatch()\n\n    const popupHandleClose = () => {\n        dispatch(setMessage(null));\n    }\n\n    return (\n        <Wrapper>\n            {app.message ?\n                <Popup content={app.message} handleClose={() => popupHandleClose()}/>\n                :\n                null}\n            {cities.map(city =>\n                <City\n                    key={city.id}\n                    id={city.id}\n                    favorites={city.favorites}\n                    name={city.searchedCity}\n                    active={city.active}\n                />\n            )}\n            {cities.length < 1 && <h1>Lets see whats going on there!</h1>}\n        </Wrapper>\n    )\n}","export default __webpack_public_path__ + \"static/media/backgroundEarth.4a4ef648.jpg\";","import React from 'react';\nimport styled, {createGlobalStyle} from 'styled-components'\n\nimport {AddCity} from \"./components/AddCity\";\nimport {Cities} from \"./components/Cities\";\nimport {device} from './Models/MediaQueries';\nimport background from './images/backgroundEarth.jpg';\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: inherit;\n    margin: 0;\n    padding: 0;\n  }\n\n  html {\n    font-size: 62.5%;\n    width: 100%;\n    height: 100%;\n    background: url(${background});\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-attachment: fixed;\n    background-position: center;\n\n  @media${device.mobileM} {\n    font-size: 81.25%;\n  }\n  }\n\n  body {\n    font-family: 'Roboto', sans-serif;\n    box-sizing: border-box;\n  }\n`\n\nconst Header = styled.header`\n  display: grid;\n  grid-template-rows: 1;\n  grid-template-columns: 1fr 1fr;\n  align-items: center;\n  border-bottom: .2rem solid black;\n  background-color: rgba(136, 140, 140, .6);\n\n@media${device.tablet} {\n} @media${device.tablet} {\n  grid-template-columns: 1fr 1fr 1fr;\n}\n`\nconst H1 = styled.h1`\n  font-size: 1.8rem;\n  letter-spacing: .1rem;\n  padding: 5px 0 2px 7px;\n`\n\nfunction App() {\n    return (\n        <>\n            <GlobalStyle/>\n            <Header>\n                <H1>Weather<br/> State</H1>\n                <AddCity/>\n            </Header>\n            <Cities/>\n        </>\n    );\n}\n\nexport default App;","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\n\nimport cityReducer from './city/citySlice';\nimport appReducer from './appSlice';\n\nexport const store = configureStore({\n    reducer: {\n        app: appReducer,\n        cities: cityReducer,\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n    RootState,\n    unknown,\n    Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}