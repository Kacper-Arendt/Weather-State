{"version":3,"sources":["app/Models/App.ts","app/hooks.ts","redux/city/citySlice.ts","app/Models/MediaQueries.ts","app/components/UI/Spinner.tsx","app/components/AddCity.tsx","redux/appSlice.ts","app/components/City.tsx","app/components/UI/Popup.tsx","app/components/Cities.tsx","images/background.jpg","App.tsx","app/store.ts","index.tsx"],"names":["Status","useAppDispatch","useDispatch","useAppSelector","useSelector","citySlice","createSlice","name","initialState","reducers","addCity","reducer","state","action","push","payload","prepare","searchedCity","id","nanoid","removeCity","index","findIndex","city","splice","AddFetchedData","fetchedData","actions","size","device","mobileS","mobileM","tablet","laptop","laptopL","Span","styled","span","Spinner","Form","form","Input","input","Button","button","AddCity","app","useState","setCity","dispatch","type","value","onChange","e","target","disabled","onClick","preventDefault","status","Fetching","Idle","appSlice","changeStatus","setMessage","message","Wrapper","div","Header","header","WeatherData","City","props","apiData","setApiData","error","setError","apiUrl","process","icon","weather","useEffect","fetch","then","res","json","data","cod","catch","console","log","src","alt","main","temp","description","wind","speed","pressure","humidity","Div","Popup","handleClose","content","Cities","cities","map","GlobalStyle","createGlobalStyle","background","H1","h1","App","store","configureStore","appReducer","cityReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d21db2c3.chunk.js","sourcesContent":["export interface IApp {\n    status: Status,\n    message?: string,\n}\n\nexport enum Status {\n    Idle = \"IDLE\",\n    Fetching = \"FETCHING\",\n}\n\n\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, nanoid, PayloadAction} from \"@reduxjs/toolkit\";\nimport {ICity, IFetchedApiData} from \"../../app/Models/City\";\n\nconst initialState = [] as ICity[]\n\nexport const citySlice = createSlice({\n    name: 'city',\n    initialState,\n    reducers: {\n        addCity: {\n            reducer: (state, action: PayloadAction<ICity>) => {\n                state.push(action.payload);\n            },\n            prepare: (searchedCity: string) => ({\n                payload: {\n                    id: nanoid(),\n                    searchedCity,\n                } as ICity\n            }),\n        },\n        removeCity(state, action: PayloadAction<string>) {\n            const index = state.findIndex((city) => city.id === action.payload);\n            state.splice(index, 1);\n        },\n        AddFetchedData(state, action: PayloadAction<IFetchedApiData>) {\n            state.findIndex((city) => city.fetchedData = action.payload)\n        }\n    },\n});\n\nexport const {addCity, removeCity, AddFetchedData} = citySlice.actions;\n\nexport default citySlice.reducer;","const size= {\n    mobileS: '320px',\n    mobileM: '375px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n}\n\nexport const device: typeof size = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n};","import React from 'react';\nimport styled from 'styled-components';\n\nconst Span = styled.span`\n  position: relative;\n  padding: 0  10px 0 10px;\n  \n  :after {\n    content: \"\";\n   position: absolute;\n   width: 50%;\n   height: 50%;\n   top: 0;\n   left: 0;\n   right: 0;\n   bottom: 0;\n   margin: auto;\n   border: 4px solid transparent;\n   border-top-color: #ffffff;\n   border-radius: 50%;\n   animation: button-loading-spinner 1s ease infinite;\n\n  @keyframes button-loading-spinner {\n    from {\n      transform: rotate(0turn);\n    }\n    to {\n      transform: rotate(2turn);\n    }\n`\n\nexport const Spinner = (): JSX.Element => {\n    return (\n        <Span></Span>\n    );\n}","import React, {useState} from \"react\";\nimport styled from 'styled-components';\nimport {FaSearch} from \"react-icons/fa\";\n\nimport {useAppDispatch, useAppSelector} from \"../hooks\";\nimport {addCity} from \"../../redux/city/citySlice\";\nimport {device} from '../Models/MediaQueries';\nimport {Spinner} from './UI/Spinner';\nimport {Status} from '../Models/App';\n\nconst Form = styled.form`\n  justify-content: center;\n  display: flex;\n  flex-direction: row;\n  height: 32px;\n  justify-self: end;\n  margin-right: 15px;\n  font-size: 20px;\n\n@media${device.mobileM} {\n  width: 200px;\n} @media${device.tablet} {\n  width: 300px;\n  height: 45px;\n} @media${device.laptop} {\n  width: 500px;\n  height: 50px;\n} @media${device.laptop} {\n  justify-self: center;\n  margin-right: 0;\n}\n`\n\nconst Input = styled.input`\n  width: 75%;\n  height: 100%;\n  border-radius: 30px 0 0 30px;\n  border: 0;\n  outline: 0;\n  background-color: #353b48;\n  color: white;\n  padding: 5px 0 5px 15px;\n  font-size: inherit;\n  font-weight: 600;\n  letter-spacing: .07em;\n  cursor: pointer;\n`\n\nconst Button = styled.button`\n  height: 100%;\n  padding: 0 15px;\n  outline: 0;\n  border-radius: 0 30px 30px 0;\n  border: none;\n  background-color: #353b48;\n  color: white;\n  font-size: inherit;\n  font-weight: 600;\n  cursor: pointer;\n\n  :disabled {\n    color: grey;\n  }\n`\n\nexport const AddCity = (): JSX.Element => {\n    const {app} = useAppSelector(state => state);\n    const [city, setCity] = useState<string>('');\n    const dispatch = useAppDispatch()\n\n    const cityHandler = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        dispatch(addCity(city));\n        setCity('');\n    }\n\n    return (\n        <Form>\n            <Input\n                type=\"text\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n            />\n            <Button\n                disabled={!city}\n                onClick={cityHandler}>\n                {app.status === Status.Fetching ? <Spinner/> : <FaSearch></FaSearch>}\n            </Button>\n        </Form>\n    )\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\nimport {IApp, Status} from '../app/Models/App'\n\nconst initialState = {status: Status.Idle} as IApp;\n\nexport const appSlice = createSlice({\n    name: 'app',\n    initialState,\n    reducers: {\n        changeStatus: (state, action: PayloadAction<Status>) => {\n            state.status = action.payload\n        },\n        setMessage: (state, action) => {\n            state.message = action.payload\n        },\n    },\n});\n\nexport const {changeStatus, setMessage} = appSlice.actions;\n\nexport default appSlice.reducer;","import React, {useEffect, useState} from \"react\";\nimport {useAppDispatch} from \"../hooks\";\nimport styled from \"styled-components\";\nimport {AiOutlineDelete} from \"react-icons/ai\";\n\nimport {removeCity, AddFetchedData} from '../../redux/city/citySlice';\nimport {changeStatus, setMessage} from '../../redux/appSlice';\nimport {IFetchedApiData, IProps} from '../Models/City';\nimport {device} from '../Models/MediaQueries';\nimport {Status} from \"../Models/App\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  width: 220px;\n  margin: 20px;\n  border: solid black 2px;\n  background-color: rgba(53, 59, 72, .9);\n  color: white;\n  font-size: 15px;\n  transition: all .2s ease-in-out;\n\n  :hover {\n    button {\n      visibility: visible;\n    }\n\n    transform: scale(1.01);\n  }\n\n@media${device.mobileM} {\n  width: 300px;\n  font-size: 17px;\n} @media${device.tablet} {\n  width: 550px;\n  font-size: 21px;\n  margin-bottom: 40px;\n  border-width: 3px;\n} @media${device.laptopL} {\n  width: 550px;\n}\n`\n\nconst Header = styled.header`\n  display: grid;\n  grid-template-rows: 1;\n  grid-template-columns: 1fr 3fr 1fr;\n  justify-content: space-between;\n  align-content: center;\n  align-items: center;\n  width: 100%;\n  background-color: rgba(157, 118, 61, 0.8);\n\n  h2 {\n    margin: 0 5px;\n    padding-left: 10px;\n  }\n\n  img {\n    width: 40px;\n  }\n\n@media${device.mobileM} {\n  img {\n    width: 45px;\n  }\n\n@media${device.tablet} {\n  img {\n    width: 65px;\n  }\n}\n}\n`\n\nconst WeatherData = styled.div`\n  width: 100%;\n  padding: 10px 0 10px 15px;\n\n  p {\n    letter-spacing: 1px;\n    margin-bottom: 4px;\n  }\n`\n\nconst Button = styled.button`\n  visibility: hidden;\n  justify-self: center;\n  padding: 2px 2px;\n  width: 50px;\n  border: solid black 2px;\n  border-radius: 2em;\n  background-color: white;\n  transition: all 0.5s;\n  font-size: 3vh;\n  webkit-transition: visibility 0s, opacity 0.5s linear;\n  transition: visibility 0.2s, opacity 0.5s linear;\n\n  :hover {\n    text-shadow: 0 0 2em rgba(255, 255, 255, 1);\n    background-color: #D93030;\n    color: #FFFFFF;\n    border-color: #FFFFFF;\n  }\n`\n\nexport const City = (props: IProps) => {\n    const dispatch = useAppDispatch();\n    const [apiData, setApiData] = useState<IFetchedApiData>();\n    const [error, setError] = useState();\n\n    const apiKey = process.env[\"REACT_APP_API_KEY\"];\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${props.name}&units=metric&appid=${apiKey}`;\n    const icon = `http://openweathermap.org/img/wn/${apiData?.weather[0].icon}.png`\n\n    const removeCityHandler = (id: string): void => {\n        dispatch(removeCity(id))\n    }\n\n    useEffect(() => {\n        dispatch(changeStatus(Status.Fetching))\n        fetch(apiUrl)\n            .then((res) => res.json())\n            .then((data) => {\n                if (data.cod == 404) {\n                    setError(data.message);\n                    dispatch(changeStatus(Status.Idle))\n                    dispatch(setMessage(data.message))\n                    return;\n                } else\n                    setApiData(data)\n                dispatch(AddFetchedData(data) && changeStatus(Status.Idle))\n            })\n            .catch((error) => {\n                console.log(error)\n            });\n    }, [apiUrl])\n\n    const fetchedData = () => {\n        if (!error && apiData) {\n            return (\n                <Wrapper>\n                    <Header>\n                        <h2>{apiData.name} </h2>\n                        <img src={icon} alt=\"weather icon\"/>\n                        <Button\n                            onClick={() => removeCityHandler(props.id)}><AiOutlineDelete/>\n                        </Button>\n                    </Header>\n                    <WeatherData>\n                        <p>Temp: {`${apiData.main.temp} °C`}</p>\n                        <p>Conditions: {apiData.weather[0].description} </p>\n                        <p>Wind: {apiData.wind.speed} m/s</p>\n                        <p>Pressure: {`${apiData.main.pressure}  HPa`}</p>\n                        <p>Humidity: {`${apiData.main.humidity}%`}</p>\n                    </WeatherData>\n                </Wrapper>\n            )\n        }\n    }\n\n    return (\n        <>\n            {fetchedData()}\n        </>\n    )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\n\nconst Div = styled.div`\n  position: fixed;\n  background: #00000050;\n  width: 100%;\n  height: 100vh;\n  top: 0;\n  left: 0;\n\n  div {\n    width: 55%;\n    max-width: 450px;\n    max-height: 70vh;\n    margin: 0 auto;\n    margin-top: 20vh;\n    padding: 20px;\n    border: 2px solid black;\n    border-radius: 4px;\n    text-align: center;\n    background: #fff;\n    overflow: auto;\n    text-transform: capitalize;\n    cursor: pointer;\n    text-wrap: none;\n  }\n`\n\ninterface IProps {\n    content?: string,\n    handleClose?: () => void\n}\n\nexport const Popup = (props: IProps): JSX.Element => {\n    return (\n        <Div onClick={props.handleClose}>\n            <div>\n                <h3>{props.content}</h3>\n            </div>\n        </Div>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport {useAppDispatch, useAppSelector} from \"../hooks\";\n\nimport {City} from \"./City\";\nimport {device} from '../Models/MediaQueries'\nimport {Status} from '../Models/App';\nimport {Popup} from './UI/Popup';\nimport {setMessage} from '../../redux/appSlice';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-wrap: wrap;\n  align-items: center;\n\n@media${device.mobileM} {\n  margin-top: 40px;\n} @media${device.laptopL} {\n  flex-direction: row;\n}\n`\n\nexport const Cities = () => {\n    const {cities, app} = useAppSelector(state => state)\n    const dispatch = useAppDispatch()\n\n    const popupHandleClose = () => {\n        dispatch(setMessage(null));\n    }\n\n    return (\n        <Wrapper>\n            {app.message ?\n                <Popup content={app.message} handleClose={() => popupHandleClose()}/>\n                :\n                null}\n            {cities.map(city =>\n                <City\n                    key={city.id}\n                    id={city.id}\n                    name={city.searchedCity}\n                />\n            )}\n        </Wrapper>\n    )\n}","export default __webpack_public_path__ + \"static/media/background.dd3ce292.jpg\";","import React from 'react';\nimport styled, {createGlobalStyle} from 'styled-components'\n\nimport {AddCity} from \"./app/components/AddCity\";\nimport {Cities} from \"./app/components/Cities\";\nimport {device} from './app/Models/MediaQueries';\nimport background from './images/background.jpg';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', sans-serif;;\n  }\n\n  html {\n    height: 100%;\n    width: 100%;\n  }\n\n  body {\n    background-image: url(${background});\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n  }\n`\n\nconst Header = styled.header`\n  display: grid;\n  grid-template-rows: 1;\n  grid-template-columns: 1fr 1fr;\n  align-items: center;\n  border-bottom: 2px solid black;\n  background-color: rgba(136, 140, 140, .6);\n@media${device.tablet} {\n  border-width: 4px;\n} @media${device.laptop} {\n  grid-template-columns: 1fr 1fr 1fr;\n}\n`\nconst H1 = styled.h1`\n  font-size: 18px;\n  letter-spacing: 1px;\n  padding: 5px 0 2px 7px;\n  margin-left: 10px;\n\n@media${device.tablet} {\n  font-size: 30px;\n}\n`\n\nfunction App() {\n    return (\n        <>\n            <GlobalStyle/>\n            <Header>\n                <H1>Weather<br/> State</H1>\n                <AddCity/>\n            </Header>\n            <Cities/>\n        </>\n    );\n}\n\nexport default App;","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\n\nimport cityReducer from '../redux/city/citySlice';\nimport appReducer from '../redux/appSlice';\n\nexport const store = configureStore({\n    reducer: {\n        app: appReducer,\n        cities: cityReducer,\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n    RootState,\n    unknown,\n    Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}