{"version":3,"sources":["app/hooks.ts","redux/city/citySlice.ts","app/Models/MediaQueries.ts","app/components/AddCity.tsx","app/components/City.tsx","app/components/Cities.tsx","images/background.jpg","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","citySlice","createSlice","name","initialState","reducers","addCity","reducer","state","action","push","payload","prepare","searchedCity","id","nanoid","removeCity","index","findIndex","city","splice","AddFetchedData","fetchedData","actions","size","device","mobileS","mobileM","tablet","laptop","laptopL","Form","styled","form","Input","input","Button","button","AddCity","useState","setCity","dispatch","type","value","onChange","e","target","disabled","onClick","preventDefault","Wrapper","div","Header","header","WeatherData","City","props","apiData","setApiData","error","setError","apiUrl","process","icon","weather","useEffect","fetch","then","res","json","data","cod","message","catch","console","log","src","alt","main","temp","description","wind","speed","pressure","humidity","Cities","cities","map","GlobalStyle","createGlobalStyle","background","H1","h1","App","store","configureStore","cityReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12fc7b54.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, nanoid, PayloadAction} from \"@reduxjs/toolkit\";\nimport {ICity, IFetchedApiData} from \"../../app/Models/City\";\n\nconst initialState = [] as ICity[]\n\nexport const citySlice = createSlice({\n    name: 'city',\n    initialState,\n    reducers: {\n        addCity: {\n            reducer: (state, action: PayloadAction<ICity>) => {\n                state.push(action.payload);\n            },\n            prepare: (searchedCity: string) => ({\n                payload: {\n                    id: nanoid(),\n                    searchedCity,\n                } as ICity\n            }),\n        },\n        removeCity(state, action: PayloadAction<string>) {\n            const index = state.findIndex((city) => city.id === action.payload);\n            state.splice(index, 1);\n        },\n        AddFetchedData(state, action: PayloadAction<IFetchedApiData>) {\n            state.findIndex((city) => city.fetchedData = action.payload)\n        }\n    },\n});\n\nexport const {addCity, removeCity, AddFetchedData} = citySlice.actions;\n\nexport default citySlice.reducer;","const size= {\n    mobileS: '320px',\n    mobileM: '375px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n}\n\nexport const device: typeof size = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n};","import React, {useState} from \"react\";\nimport styled from 'styled-components'\nimport {FaSearch} from \"react-icons/fa\";\n\nimport {useAppDispatch} from \"../hooks\";\nimport {addCity} from \"../../redux/city/citySlice\";\nimport {device} from '../Models/MediaQueries'\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: row;\n  height: 32px;\n  justify-self: end;\n  margin-right: 15px;\n  font-size: 20px;\n\n@media${device.mobileM} {\n  width: 200px;\n} @media${device.tablet} {\n  width: 300px;\n  height: 45px;\n} @media${device.laptop} {\n  width: 500px;\n  height: 50px;\n} @media${device.laptop} {\n  justify-self: left;\n}\n`\n\nconst Input = styled.input`\n  width: 75%;\n  height: 100%;\n  border-radius: 30px 0 0 30px;\n  border: 0;\n  outline: 0;\n  background-color: #353b48;\n  color: white;\n  padding: 5px 0 5px 15px;\n  font-size: inherit;\n  font-weight: 600;\n  letter-spacing: .07em;\n  cursor: pointer;\n`\n\nconst Button = styled.button`\n  height: 100%;\n  padding: 0 15px;\n  border: 0;\n  outline: 0;\n  border-left: solid 2px black;\n  border-radius: 0 30px 30px 0;\n  background-color: #353b48;\n  color: white;\n  font-size: inherit;\n  font-weight: 600;\n  cursor: pointer;\n\n  :disabled {\n    color: grey;\n  }\n  \n  @media${device.laptop}{\n  border-left: none;\n}\n`\n\nexport const AddCity = (): JSX.Element => {\n    const [city, setCity] = useState('');\n    const dispatch = useAppDispatch()\n\n    const cityHandler = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        dispatch(addCity(city));\n        setCity('');\n    }\n\n    return (\n        <Form>\n            <Input\n                type=\"text\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n            />\n            <Button\n                disabled={!city}\n                onClick={cityHandler}><FaSearch></FaSearch>\n            </Button>\n        </Form>\n    )\n}","import React, {useEffect, useState} from \"react\";\nimport {useAppDispatch} from \"../hooks\";\nimport styled from \"styled-components\";\nimport {AiOutlineDelete} from \"react-icons/ai\";\n\nimport {removeCity, AddFetchedData} from '../../redux/city/citySlice'\nimport {IFetchedApiData, IProps} from '../Models/City'\nimport {device} from '../Models/MediaQueries'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  width: 220px;\n  margin: 20px;\n  border: solid black 2px;\n  background-color: rgba(53, 59, 72, .9);\n  color: white;\n  font-size: 15px;\n  transition: all .2s ease-in-out;\n  \n  :hover{\n    button{\n      visibility: visible;\n    }\n    transform: scale(1.01);\n  }\n\n@media${device.mobileM} {\n  width: 300px;\n  font-size: 17px;\n} @media${device.tablet} {\n  width: 550px;\n  font-size: 21px;\n  margin-bottom: 40px;\n  border-width: 3px;\n}  @media${device.laptopL} {\n  width: 550px;\n}\n`\n\nconst Header = styled.header`\n  display: grid;\n  grid-template-rows: 1;\n  grid-template-columns: 1fr 3fr 1fr;\n  justify-content: space-between;\n  align-content: center;\n  align-items: center;\n  width: 100%;\n  background-color: rgba(157,118,61,0.8);\n\n  h2 {\n    margin: 0 5px;\n    padding-left: 10px;\n  }\n\n  img {\n    width: 40px;\n  }\n\n@media${device.mobileM} {\n  img {\n    width: 45px;\n  }\n\n@media${device.tablet} {\n  img {\n    width: 65px;\n  }\n}\n}\n`\n\nconst WeatherData = styled.div`\n  width: 100%;\n  padding: 10px 0 10px 15px;\n\n  p {\n    letter-spacing: 1px;\n    margin-bottom: 4px;\n  }\n`\n\nconst Button = styled.button`\n  visibility: hidden;\n  justify-self: center;\n  padding: 2px 2px;\n  width: 50px;\n  border: solid black 2px;\n  border-radius: 2em;\n  background-color: white;\n  transition: all 0.5s;\n  font-size: 3vh;\n  webkit-transition: visibility 0s, opacity 0.5s linear;\n  transition: visibility 0.2s, opacity 0.5s linear;\n\n  :hover {\n    text-shadow: 0 0 2em rgba(255, 255, 255, 1);\n    background-color: #D93030;\n    color: #FFFFFF;\n    border-color: #FFFFFF;\n  }\n`\n\nexport const City = (props: IProps) => {\n    const dispatch = useAppDispatch();\n    const [apiData, setApiData] = useState<IFetchedApiData>();\n    const [error, setError] = useState();\n\n    const apiKey = process.env[\"REACT_APP_API_KEY\"];\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${props.name}&units=metric&appid=${apiKey}`;\n    const icon = `http://openweathermap.org/img/wn/${apiData?.weather[0].icon}.png`\n\n    const removeCityHandler = (id: string): void => {\n        dispatch(removeCity(id))\n    }\n\n    useEffect(() => {\n        fetch(apiUrl)\n            .then((res) => res.json())\n            .then((data) => {\n                if (data.cod == 404) {\n                    setError(data.message);\n                    return;\n                } else\n                    setApiData(data)\n                dispatch(AddFetchedData(data))\n            })\n            .catch((error) => {\n                console.log(error)\n            });\n    }, [apiUrl])\n\n    const fetchedData = () => {\n        if (!error && apiData) {\n            return (\n                <Wrapper>\n                    <Header>\n                        <h2>{apiData.name} </h2>\n                        <img src={icon} alt=\"weather icon\"/>\n                        <Button\n                            onClick={() => removeCityHandler(props.id)}><AiOutlineDelete/>\n                        </Button>\n                    </Header>\n                    <WeatherData>\n                        <p>Temp: {`${apiData.main.temp} °C`}</p>\n                        <p>Conditions: {apiData.weather[0].description} </p>\n                        <p>Wind: {apiData.wind.speed} m/s</p>\n                        <p>Pressure: {`${apiData.main.pressure}  HPa`}</p>\n                        <p>Humidity: {`${apiData.main.humidity}%`}</p>\n                    </WeatherData>\n                </Wrapper>\n            )\n        }\n    }\n\n    return (\n        <>\n            {fetchedData()}\n        </>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport {useAppSelector} from \"../hooks\";\n\nimport {City} from \"./City\";\nimport {device} from '../Models/MediaQueries'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-wrap: wrap;\n  align-items: center;\n\n@media${device.mobileM} {\n  margin-top: 40px;\n}\n@media${device.laptopL}{\n  flex-direction: row;\n}\n`\n\nexport const Cities = () => {\n    const {cities} = useAppSelector(state => state)\n\n    return (\n        <Wrapper>\n            {cities.map(city =>\n                <City\n                    key={city.id}\n                    id={city.id}\n                    name={city.searchedCity}\n                />\n            )}\n        </Wrapper>\n    )\n}","export default __webpack_public_path__ + \"static/media/background.dd3ce292.jpg\";","import React from 'react';\nimport styled, {createGlobalStyle} from 'styled-components'\n\nimport {AddCity} from \"./app/components/AddCity\";\nimport {Cities} from \"./app/components/Cities\";\nimport {device} from './app/Models/MediaQueries';\nimport background from './images/background.jpg';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', sans-serif;;\n  }\n\n  html {\n    height: 100%;\n    width: 100%;\n  }\n\n  body {\n    background-image: url(${background});\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n  }\n`\n\nconst Header = styled.header`\n  display: grid;\n  grid-template-rows: 1;\n  grid-template-columns: 1fr 1fr;\n  align-items: center;\n  border-bottom: 2px solid black;\n  background-color: rgba(136, 140, 140, .6);\n@media${device.tablet} {\n  border-width: 4px;\n} @media${device.laptop} {\n  grid-template-columns: 1fr 2fr;\n}\n`\nconst H1 = styled.h1`\n  font-size: 18px;\n  letter-spacing: 1px;\n  padding: 5px 0 2px 7px;\n  margin-left: 10px;\n\n@media${device.tablet} {\n  font-size: 30px;\n}\n`\n\nfunction App() {\n    return (\n        <>\n            <GlobalStyle/>\n            <Header>\n                <H1>Weather<br/> State</H1>\n                <AddCity/>\n            </Header>\n            <Cities/>\n        </>\n    );\n}\n\nexport default App;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport cityReducer from '../redux/city/citySlice'\n\nexport const store = configureStore({\n  reducer: {\n    cities: cityReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}